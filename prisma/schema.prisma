// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Service status represents the current operational state of a service
enum ServiceStatus {
  OPERATIONAL           // Service is functioning normally
  DEGRADED_PERFORMANCE  // Service is experiencing slowdowns
  PARTIAL_OUTAGE       // Some features are unavailable
  MAJOR_OUTAGE         // Service is completely down
  UNDER_MAINTENANCE    // Scheduled maintenance
}

// Incident status tracks the lifecycle of an incident
enum IncidentStatus {
  INVESTIGATING  // Team is investigating the issue
  IDENTIFIED    // Root cause has been identified
  MONITORING    // Fix has been applied, monitoring for stability
  RESOLVED      // Incident has been fully resolved
}

// Service model represents a monitored service or component
model Service {
  id             String         @id @default(cuid())
  name           String                            // Service display name
  description    String?                          // Optional description
  status         ServiceStatus  @default(OPERATIONAL)
  organizationId String                          // Clerk organization ID
  incidents      Incident[]                       // Related incidents
  metrics        ServiceMetric[]                  // Performance metrics
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([organizationId])
}

// ServiceMetric tracks performance and uptime metrics
model ServiceMetric {
  id          String        @id @default(cuid())
  service     Service       @relation(fields: [serviceId], references: [id])
  serviceId   String
  status      ServiceStatus                    // Current service status
  timestamp   DateTime      @default(now())    // When metric was recorded
  latency     Float?                          // Response time in milliseconds
  uptime      Float                           // Uptime percentage (0-100)

  @@index([serviceId])
}

// Incident model for tracking service disruptions
model Incident {
  id             String         @id @default(cuid())
  title          String                            // Incident title
  description    String                            // Detailed description
  status         IncidentStatus @default(INVESTIGATING)
  service        Service        @relation(fields: [serviceId], references: [id])
  serviceId      String
  organizationId String                          // Clerk organization ID
  createdById    String                          // Clerk user ID
  startedAt      DateTime      @default(now())    // When incident began
  resolvedAt     DateTime?                        // When incident was resolved
  updates        IncidentUpdate[]                 // Status updates

  @@index([organizationId])
  @@index([serviceId])
}

// IncidentUpdate tracks status changes and communications
model IncidentUpdate {
  id          String    @id @default(cuid())
  incident    Incident  @relation(fields: [incidentId], references: [id])
  incidentId  String
  message     String                           // Update message
  createdById String                          // Clerk user ID
  createdAt   DateTime  @default(now())

  @@index([incidentId])
}
